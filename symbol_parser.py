# coding=UTF-8

# Define a few special charecters in a dictonary
symbol_dictionary = {'&amp;': '\\&',
                     'œÄ': '\\pi ',
                     'Œ±': '\\alpha ',
                     '': '\\epsilon ',
                     'œÜ': '\\phi ',
                     'Œ∏': '\\theta ',
                     'œÅ': '\\rho ',
                     '¬µ': '\\mu ',
                     '‚àÜ': '\\Delta ',
                     'Œµ': '\\varepsilon ',
                     'œï': '\\Phi ',
                     # For now, don't use these chars in mathmode...
                     #'√¶': '\\textit{√¶} ',
                     #'√Ü': '\\textit{√Ü} ',
                     #'√∏': '\\textit{√∏} ',
                     #'√ò': '\\textit{√ò} ',
                     #'√•': '\\textit{√•} ',
                     #'√Ö': '\\textit{√Ö} ',
                     '‚áï': '\\Updownarrow ',
                     '‚áî': '\\Leftrightarrow ',
                     'œâ': '\\omega',
                     '‚Ñ¶': '\\Omega',
                     '&': '\\&'}  # ToDo: Add more of these...


def symbol_parser(symbol, mathmode):
    """Parses symbols into LaTeX symbols

    :param symbol: A string which is the given symbol that needs to be checked
    :return: Formatted LaTeX symbol or what was given
    """
    if mathmode:
        for key in symbol_dictionary:  # Check entire dictionary
            try:  # Try to replace the given symbol
                symbol = symbol.replace(key, symbol_dictionary[key])
            except KeyError:  # If it fails, just skip it
                pass

        return symbol  # Return the parsed symbol

    elif mathmode is False:
        for key in symbol_dictionary:  # Check entire dictionary
            try:  # Try to replace the given symbol
                symbol = symbol.replace(key, "$" + symbol_dictionary[key] + "$")
            except KeyError:  # If it fails, just skip it
                pass

        return symbol  # Return the parsed symbol
