# coding=UTF-8

# Define a few special charecters in a dictonary
symbol_dictionary = {'&amp;': '\\&',
                     'œÄ': '\\pi ',
                     'Œ±': '\\alpha ',
                     '': '\\epsilon ',
                     'œÜ': '\\phi ',
                     'Œ∏': '\\theta ',
                     'œÅ': '\\rho ',
                     '¬µ': '\\mu ',
                     '‚àÜ': '\\Delta ',
                     'Œµ': '\\varepsilon ',
                     'œï': '\\Phi ',
                     # For now, don't use these chars in mathmode...
                     #'√¶': '\\textit{√¶} ',
                     #'√Ü': '\\textit{√Ü} ',
                     #'√∏': '\\textit{√∏} ',
                     #'√ò': '\\textit{√ò} ',
                     #'√•': '\\textit{√•} ',
                     #'√Ö': '\\textit{√Ö} ',
                     '‚áï': '\\Updownarrow ',
                     '‚áî': '\\Leftrightarrow ',
                     'œâ': '\\omega',
                     '‚Ñ¶': '\\Omega',
                     '&': '\\&',
                     'Œ≥' : '\\gamma',
                     'œÑ' : '\\tau',
                     'œÉ' : '\\sigma'}  # ToDo: Add more of these...


def symbol_parser(str_with_symbols, mathmode):
    """Parses symbols into LaTeX symbols

    :param str_with_symbols: A string which is the given symbol that needs to be checked
    :return: Formatted LaTeX symbol or what was given
    """
    if mathmode: # return the "pure" string
        for unicode_symbol in symbol_dictionary:  # Check entire dictionary
            try:  # Try to replace the given symbol
                str_with_symbols = str_with_symbols.replace(unicode_symbol, symbol_dictionary[unicode_symbol])
            except unicode_symbolError:  # If it fails, just skip it
                pass

        return str_with_symbols  # Return the parsed symbol

    elif mathmode is False: # return the parsed string with $ $ to create a LaTeX math mode region
        for unicode_symbol in symbol_dictionary:  # Check entire dictionary
            try:  # Try to replace the given symbol
                str_with_symbols = str_with_symbols.replace(unicode_symbol, "$" + symbol_dictionary[unicode_symbol] + "$")
            except unicode_symbolError:  # If it fails, just skip it
                pass

        return str_with_symbols  # Return the parsed symbol
